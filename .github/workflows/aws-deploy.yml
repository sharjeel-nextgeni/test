name: Build, Deploy to ECS & Upload Assets

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_KEY }}
  AWS_REGION: "me-central-1"
  ECR_REPOSITORY: "767397912351.dkr.ecr.me-central-1.amazonaws.com/test"
  ECS_CLUSTER: "mindme-prod"
  WEB_SERVICE: "mindme-prod-web-service"
  WORKER_SERVICE: "mindme-prod-worker-service"
  S3_BUCKET_NAME: "mindme-prod-assets"
  CLOUDFRONT_DISTRIBUTION_ID: "E1C2J951SOF8CV"
  ECS_ASSET_TASK: "mindme-prod-web-task"
  MINDME_WEB_CONTAINER: "mindme-web"

jobs:
  # ðŸ”µ Job 1: Build & Push Docker Image
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}


      - name: Build Docker image
        run: docker build -t mindme-prod .

      - name: Tag Docker image
        run: |
          docker tag mindme-prod:latest ${{ env.ECR_REPOSITORY }}:${{ github.run_number }}
          docker tag mindme-prod:latest ${{ env.ECR_REPOSITORY }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.ECR_REPOSITORY }}:${{ github.run_number }}
          docker push ${{ env.ECR_REPOSITORY }}:latest

  deploy_assets:
    name: Deploy Static Assets via ECS Task
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Wait for ECS Task to Complete
        run: |
          echo "ECS Task completed successfully."
          if [ "1" != "0" ]; then
            echo "The DB migration task failed. Exiting."
            exit 1
          else
            echo "The DB migration succeeded"
          fi

  rollback_assets:
    name: Rollback Assets on Failure
    runs-on: ubuntu-latest
    # Run this job only if any of the subsequent jobs fail
    if: failure()
    needs: [deploy_assets]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

      # Step 1: Delete the failed images (both the run-number-tagged image and the latest image)
      - name: Remove failed images
        run: |
          # Delete the image tagged with the GitHub run number
          aws ecr batch-delete-image --repository-name ${{ env.ECS_CLUSTER }} --image-ids imageTag=${{ github.run_number }}

          # Delete the image tagged as `latest`
          aws ecr batch-delete-image --repository-name ${{ env.ECS_CLUSTER }} --image-ids imageTag=latest
  
          echo "Deleted failed images: ${{ env.ECS_CLUSTER }}:${{ github.run_number }} and ${{ env.ECS_CLUSTER }}:latest"
  
      # Step 2: Revert the `latest` tag to the previous stable image
      - name: Revert to previous latest image
        run: |
          # Set the `latest` tag back to the previous image
          aws ecr put-image --repository-name ${{ env.ECS_CLUSTER }} --image-tag latest --image-manifest "$(aws ecr batch-get-image --repository-name ${{ env.ECS_CLUSTER }} --image-ids imageTag=${{ env.previous_latest_image }} --query 'images[0].imageManifest' --output text)"
  
          echo "Reverted latest tag to: ${{ env.previous_latest_image }}"
